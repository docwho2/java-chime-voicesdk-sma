AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions

Description: >
  AWS Chime Voice SDK SMA

Parameters:
  CONNECTID:
    Description: AWS Connect Instance ID (last part of the ARN)
    Type: String
    Default: f837ec93-b6e5-4429-acb7-XXXXXXXXXXXX
  SMAID:
    Description: Chime Voice Sip Media Application (SMA) ID
    Type: String
    Default: cf3e17cd-f4e5-44c3-ab04-XXXXXXXXXXXX
  OPENAIAPIKEY:
    Description: OpenAI Key stored in parameter store
    Type: AWS::SSM::Parameter::Value<String>
    Default: OPENAI_API_KEY
  OPENAIMODEL:
    Description: OpenAI ChatGPT Model
    Type: String
    Default: gpt-3.5-turbo-0613
    AllowedValues: # https://platform.openai.com/docs/models/overview
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo
        - gpt-4
  VOICEIDEN:
    Description: The voice used for LEX and prompt generation for English
    Type: String
    Default: Joanna
    AllowedValues: # https://docs.aws.amazon.com/polly/latest/dg/ntts-voices-main.html
        - Ivy      # Female (child)
        - Joanna   # Female
        - Kendra   # Female
        - Kimberly # Female
        - Salli    # Female
        - Joey     # Male
        - Justin   # Male (child)
        - Kevin    # Male (child)
        - Matthew  # Male
        - Ruth     # Female
        - Stephen  # Male
  VOICEIDES:
    Description: The voice used for LEX and prompt generation for Spanish
    Type: String
    Default: Lupe
    AllowedValues:
        - Mia      # Female (Mexican)
        - Andrés   # Male (Mexican)
        - Lupe     # Female (US)
        - Pedro    # Male (US)
  NAMEENGLISH:
    Description: First Name for transferring calls to in English
    Type: String
    Default: Representative
  NAMESPANISH:
    Description: First Name for transferring calls to in Spanish
    Type: String
    Default: Representante
  TRANSFERNUMBER:
    Description: Phone Number to transfer calls to for a person
    Type: String
    Default: '+18004444444'
  CALLSTABLENAME:
    Description: Name of Global Dynamo Table to store info on calls from Chime
    Type: String
    Default: chime-voicesdk-sma-calls
  REGIONS:
    Description: TWO Regions where were are deploying (to create the global table and where Chime exists)
    Type: CommaDelimitedList
    Default: us-east-1,us-west-2
    AllowedValues:
        - us-east-1
        - us-west-2
        - eu-central-1
        - eu-west-2

       
Conditions:
  CreateCallTable: !Equals 
    - !Ref AWS::Region
    - !Select [ 0, !Ref REGIONS ]

Globals:
  Function:
    Runtime: java11
    Timeout: 30
    MemorySize: 3009
    Architectures:  # SnapStart on Java 11 requires x86
        - x86_64

Resources:
                      
  PromptBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    
  PromptBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PromptBucket
      PolicyDocument:  
        Version: 2012-10-17
        Statement:
          - Sid: AllowChimeAccessRead
            Effect: Allow
            Principal:
              Service: voiceconnector.chime.amazonaws.com
            Action:
              - s3:GetObject
            Resource:
              - !GetAtt PromptBucket.Arn
              - !Join [ "", [ !GetAtt PromptBucket.Arn , '/*' ] ]
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
  
  RecordBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    
  RecordBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RecordBucket
      PolicyDocument:  
        Version: 2012-10-17
        Statement:
          - Sid: AllowChimeAccessRecord
            Effect: Allow
            Principal:
              Service: voiceconnector.chime.amazonaws.com
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObject
            Resource:
              - !GetAtt RecordBucket.Arn
              - !Join [ "", [ !GetAtt RecordBucket.Arn , '/*' ] ]
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"                
 
  PromptCreator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PromptCreator
      Description: Creates Static prompts to be used in Chime Voice SDK
      Handler: cloud.cleo.chimesma.PollyPromptGenerator
      CodeUri: ./PollyPromptCreation
      Environment: 
        Variables:
            PROMPT_BUCKET: !Ref PromptBucket
      Policies: 
        - S3CrudPolicy:
            BucketName: !Ref PromptBucket
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - polly:SynthesizeSpeech
              Resource: '*'
            
  
  MainPrompt:
    Type: Custom::PromptCreator
    Properties:
        ServiceToken: !GetAtt PromptCreator.Arn
        VoiceId: !Ref VOICEIDEN
        PromptName: main.wav
        PromptText: |
            Welcome to CLEO Cloud Solutions, thank you for calling.
            
  TansferPrompt:
    Type: Custom::PromptCreator
    Properties:
        ServiceToken: !GetAtt PromptCreator.Arn
        VoiceId: !Ref VOICEIDEN
        PromptName: transfer.wav
        PromptText: |
            <speak>
                Transferring <break time="10s"/>
            </speak>
        
  GoodbyePrompt:
    Type: Custom::PromptCreator
    Properties:
        ServiceToken: !GetAtt PromptCreator.Arn
        VoiceId: !Ref VOICEIDEN
        PromptName: goodbye.wav
        PromptText: Thank you for calling, good bye
        
  GoodbyePromptEN:
    Type: Custom::PromptCreator
    Properties:
        ServiceToken: !GetAtt PromptCreator.Arn
        VoiceId: !Ref VOICEIDEN
        PromptName: goodbye-en-US.wav
        PromptText: Thank you for calling, good bye.
        
  GoodbyePromptES:
    Type: Custom::PromptCreator
    Properties:
        ServiceToken: !GetAtt PromptCreator.Arn
        VoiceId: !Ref VOICEIDES
        PromptName: goodbye-es-US.wav
        PromptText: Gracias por llamar, adiós.
                
  ChimeSMA:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ChimeSMA
      Description: Chime SMA Call FLow Director Example
      Handler: cloud.cleo.chimesma.examples.actions.ExampleFlow
      #AutoPublishAlias: SNAPSTART
      CodeUri: ./Examples
      Environment: 
        Variables:
          PROMPT_BUCKET: !Ref PromptBucket
          RECORD_BUCKET: !Ref RecordBucket
          CALLS_TABLE_NAME: !Ref CALLSTABLENAME
          BOT_ALIAS_ARN: !GetAtt BotAlias.Arn
          WEATHER_BOT_ALIAS_ARN: !GetAtt BotAliasWeather.Arn
          CHATGPT_BOT_ALIAS_ARN: !GetAtt BotAliasGPT.Arn
          THROW_EXCEPTION: false
          LANGUAGE_VOICE_MAP:
              Fn::ToJsonString:
                  - Locale: en-US
                    VoiceId: !Ref VOICEIDEN
                  - Locale: es-US
                    VoiceId: !Ref VOICEIDES
      Policies: 
        - DynamoDBWritePolicy:
            TableName: !Ref CALLSTABLENAME
      #SnapStart:
      #  ApplyOn: PublishedVersions
  
        
  ChimeSMAPerm:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref ChimeSMA
        Action: lambda:InvokeFunction
        Principal: voiceconnector.chime.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
  
  #ChimeSMASnapPerm:
  #    Type: AWS::Lambda::Permission
  #    Properties:
  #      FunctionName: !Ref ChimeSMA.Alias
  #      Action: lambda:InvokeFunction
  #      Principal: voiceconnector.chime.amazonaws.com
  #      SourceAccount: !Ref 'AWS::AccountId'
  
  
  CallTable:
    Type: AWS::DynamoDB::GlobalTable
    # Only create this once when deploying to us-east-1
    Condition: CreateCallTable
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref CALLSTABLENAME
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: phoneNumber
          AttributeType: S
      KeySchema:
        - AttributeName: phoneNumber
          KeyType: HASH
      TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
      StreamSpecification:
            StreamViewType: KEYS_ONLY
      Replicas:
          - Region: !Select [0, !Ref REGIONS]
          - Region: !Select [1, !Ref REGIONS]
          
  
  TransferCall:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-TransferCall
      Description: Lambda that will send message to Chime SMA to indicate transfer
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 512
      Timeout: 5
      Environment: 
        Variables:
          CALLS_TABLE_NAME: !Ref CALLSTABLENAME
      Policies:
        - !Ref ChimePolicy
        - DynamoDBReadPolicy:
            TableName: !Ref CALLSTABLENAME
      InlineCode: |
        const {ChimeClient, UpdateSipMediaApplicationCallCommand} = require("@aws-sdk/client-chime");
        const { DynamoDBClient, GetItemCommand } = require("@aws-sdk/client-dynamodb")
        const ddb = new DynamoDBClient();
        const regex = /(\+[0-9]+)/;
        const table_name = process.env.CALLS_TABLE_NAME;
        exports.handler = async function (event) {
            console.log(JSON.stringify(event));
            let match = event.Details.Parameters.Diversion.match(regex);
            console.log('Extracted phone is ' + match[1] );
            
            const dparams = {
                Key : {
                  phoneNumber : {
                    S: match[1]
                  }
                },
                TableName: table_name
            };
            
            const dresponse = await ddb.send(new GetItemCommand(dparams));
            console.log(JSON.stringify(dresponse))
            
            const cparams = {
                SipMediaApplicationId: dresponse.Item.sipMediaApplicationId.S,
                TransactionId: dresponse.Item.transactionId.S,
                Arguments: {
                    phoneNumber: event.Details.Parameters.transferTo
                }   
            };
            // We need to know region before initializing client
            const chime = new ChimeClient({ region: dresponse.Item.region.S,  });
            const cresponse = await chime.send(new UpdateSipMediaApplicationCallCommand(cparams));
            console.log(JSON.stringify(cresponse));
            return {status: 'OK'};
        };
            
  TransferCallConnectIntegration:
    Type: AWS::Connect::IntegrationAssociation
    Properties:
      InstanceId: !Sub arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${CONNECTID}
      IntegrationType: LAMBDA_FUNCTION
      IntegrationArn: !GetAtt TransferCall.Arn
  
  ChimePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Description: Allow Lambda call Chime API to update SMA 
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - chime:*
                Resource: '*'
      
                
  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lex.amazonaws.com
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-Bot-Role-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "polly:SynthesizeSpeech"
                  - "comprehend:DetectSentiment"
                  - "lambda:invokeFunction"
                Resource: "*"
  
  LexBot:
    Type: AWS::Lex::Bot
    Properties:
      Name: !Sub ${AWS::StackName}-Lex-Bot-Main
      Description: Main Bot
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      AutoBuildBotLocales: true
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: en_US
          Description: Main Bot English
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: !Ref VOICEIDEN
          Intents:
            - Name: "Weather"
              Description: "Play a help prompt"
              SampleUtterances:
                - Utterance: "weather"
                - Utterance: "what is the forecast for today"
                - Utterance: "weather forecast"
                - Utterance: "weather conditions"
            - Name: "Quit"
              Description: "Hang Up the call"
              SampleUtterances:
                - Utterance: "quit"
                - Utterance: "I'm done"
                - Utterance: "good bye"
                - Utterance: "talk to you later"
                - Utterance: "see ya"
                - Utterance: "later"
                - Utterance: "exit"
                - Utterance: "Thank you"
                - Utterance: "all done"
                - Utterance: "That's it'"
                - Utterance: "nothing else"
                - Utterance: "done"
                - Utterance: "no"
            - Name: "Transfer"
              Description: "Send Call to a Person"
              SampleUtterances:
                - Utterance: "speak with someone"
                - Utterance: "talk to someone"
                - Utterance: "speak with a person"
                - Utterance: "Representative"
                - Utterance: "real persion"
                - Utterance: "someone real"
              InitialResponseSetting:
                  InitialResponse:
                      AllowInterrupt: false
                      MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: "I'll transfer you to a person who can help"
            - Name: "FallbackIntent"
              Description: "Main Fallback"
              ParentIntentSignature: "AMAZON.FallbackIntent"
              InitialResponseSetting:
                  InitialResponse:
                      AllowInterrupt: false
                      MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: "FallBack send to Chat GPT"
          
  BotVersion:
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref LexBot
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: Main Bot V1
      
  BotAlias:
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref LexBot
      BotAliasName: "Latest"
      BotVersion: !GetAtt BotVersion.BotVersion
      SentimentAnalysisSettings:
        DetectSentiment: false
      BotAliasLocaleSettings:
        - LocaleId: en_US
          BotAliasLocaleSetting:
            Enabled: true
  
            
  LexBotWeather:
    Type: AWS::Lex::Bot
    Properties:
      Name: !Sub ${AWS::StackName}-Lex-Bot-Weather
      Description: Weather Bot
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      AutoBuildBotLocales: true
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: en_US
          Description: Weather Bot English
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: !Ref VOICEIDEN
          Intents:
            - Name: "Weather"
              Description: "Report Weather Forcast"
              SampleUtterances:
                - Utterance: "weather"
                - Utterance: "what is the forecast for today"
                - Utterance: "weather forecast"
                - Utterance: "weather conditions"
              InitialResponseSetting:
                  InitialResponse:
                      AllowInterrupt: false
                      MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: "The Weather looks clear and sunny with high's in the mid eighties"
            - Name: "Quit"
              Description: "Hang Up the call"
              SampleUtterances:
                - Utterance: "quit"
                - Utterance: "I'm done"
                - Utterance: "good bye"
                - Utterance: "talk to you later"
                - Utterance: "see ya"
                - Utterance: "later"
                - Utterance: "exit"
                - Utterance: "Thank you"
                - Utterance: "all done"
                - Utterance: "That's it'"
                - Utterance: "nothing else"
            - Name: "FallbackIntent"
              Description: "Weather Fallback"
              ParentIntentSignature: "AMAZON.FallbackIntent"
              InitialResponseSetting:
                  InitialResponse:
                      AllowInterrupt: false
                      MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: "Fall Back on weather intent"
          
  BotVersionWeather:
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref LexBotWeather
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: Weather Bot V1
      
  BotAliasWeather:
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref LexBotWeather
      BotAliasName: "Latest"
      BotVersion: !GetAtt BotVersionWeather.BotVersion
      SentimentAnalysisSettings:
        DetectSentiment: false
      BotAliasLocaleSettings:
        - LocaleId: en_US
          BotAliasLocaleSetting:
            Enabled: true
    
  LexBotGPT:
    Type: AWS::Lex::Bot
    Properties:
      Name: !Sub ${AWS::StackName}-Lex-Bot-GPT
      Description: ChatGPT Bot 
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      AutoBuildBotLocales: true
      IdleSessionTTLInSeconds: 300
      BotLocales:
        - LocaleId: en_US
          Description: ChatGPT Bot English
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: !Ref VOICEIDEN
          Intents:
            - Name: "Quit"
              Description: "Hang Up the call"
              SampleUtterances:
                - Utterance: "quit"
                - Utterance: "I'm done"
                - Utterance: "good bye"
                - Utterance: "talk to you later"
                - Utterance: "see ya"
                - Utterance: "later"
                - Utterance: "exit"
                - Utterance: "Thank you"
                - Utterance: "all done"
                - Utterance: "That's it'"
                - Utterance: "nothing else"
            - Name: "FallbackIntent"
              Description: "Default intent when no other intent matches, send to GPT"
              ParentIntentSignature: "AMAZON.FallbackIntent"
              FulfillmentCodeHook:
                  Enabled: true
              InitialResponseSetting:
                  InitialResponse:
                      AllowInterrupt: false
                      MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: Thinking
                            Variations:
                              - PlainTextMessage:
                                  Value: Working
                              - PlainTextMessage:
                                  Value: Processing
        - LocaleId: es_US
          Description: ChatGPT Bot Spanish
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: !Ref VOICEIDES
          Intents:
            - Name: "About"
              Description: "Play a help prompt"
              SampleUtterances:
                - Utterance: "Estoy confundida"
                - Utterance: "ayuda"
                - Utterance: "¿Qué puede hacer esto?"
                - Utterance: "qué puedo decir"
                - Utterance: "dame algunos ejemplos"
                - Utterance: "Ayudame aqui"
                - Utterance: "necesito ayuda"
            - Name: "Quit"
              Description: "Hang Up the call"
              SampleUtterances:
                - Utterance: "abandonar"
                - Utterance: "He terminado"
                - Utterance: "adiós"
                - Utterance: "Hablaré contigo más tarde"
                - Utterance: "salida"
                - Utterance: "gracias"
            - Name: !Ref NAMEENGLISH
              Description: !Sub "Send Call to ${NAMEENGLISH}"
              SampleUtterances:
                - Utterance: !Sub "${NAMEENGLISH}"
                - Utterance: !Sub "${NAMESPANISH}"
                - Utterance: !Sub "quiero hablar con ${NAMEENGLISH}"
                - Utterance: !Sub "quiero hablar con ${NAMESPANISH}"
                - Utterance: "hablar con alguien"
                - Utterance: "hablar con una persona"
            - Name: "FallbackIntent"
              Description: "Default intent when no other intent matches, send to GPT"
              ParentIntentSignature: "AMAZON.FallbackIntent"
              FulfillmentCodeHook:
                  Enabled: true
              InitialResponseSetting:
                  InitialResponse:
                      AllowInterrupt: false
                      MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: Pensamiento
                            Variations:
                              - PlainTextMessage:
                                  Value: trabajador
                              - PlainTextMessage:
                                  Value: "la transformación"
        
  BotVersionGPT:
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref LexBotGPT
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
        - LocaleId: es_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: ChatGPT Bot V1
      
  BotAliasGPT:
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref LexBotGPT
      BotAliasName: "Latest"
      BotVersion: !GetAtt BotVersionGPT.BotVersion
      SentimentAnalysisSettings:
        DetectSentiment: false
      BotAliasLocaleSettings:
        - LocaleId: en_US
          BotAliasLocaleSetting:
            Enabled: true
            CodeHookSpecification:
              LambdaCodeHook:
                CodeHookInterfaceVersion: "1.0"
                LambdaArn: !Ref ChatGPT.Alias
        - LocaleId: es_US
          BotAliasLocaleSetting:
            Enabled: true
            CodeHookSpecification:
              LambdaCodeHook:
                CodeHookInterfaceVersion: "1.0"
                LambdaArn: !Ref ChatGPT.Alias
                
  ChatGPT:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ChatGPT
      Description: Lex fullfilment that talks to ChatGPT service
      Handler: cloud.cleo.connectgpt.ChatGPTLambda
      AutoPublishAlias: SNAPSTART
      CodeUri: ./ChatGPT
      Environment: 
        Variables:
          OPENAI_MODEL: !Ref OPENAIMODEL
          OPENAI_API_KEY: !Ref OPENAIAPIKEY
          SESSION_TABLE_NAME: !Ref SessionTable
      SnapStart:
        ApplyOn: PublishedVersions
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref SessionTable
        - DynamoDBWritePolicy:
            TableName: !Ref SessionTable
  
        
  LexToChatGPTPerm:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref ChatGPT
        Action: lambda:InvokeFunction
        Principal: lexv2.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
  
  LexToChatGPTSnapPerm:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref ChatGPT.Alias
        Action: lambda:InvokeFunction
        Principal: lexv2.amazonaws.com
        SourceAccount: !Ref 'AWS::AccountId'
  
  SessionTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub ${AWS::StackName}-session
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: phoneNumber
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: phoneNumber
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
            
            
  ChimeCallLexMain:
    Type: 'AWS::Lex::ResourcePolicy'
    Properties:
      ResourceArn: !GetAtt BotAlias.Arn
      Policy:
       {
          "Version": "2012-10-17",
          "Statement": [
            {
            "Sid": "AllowChimePstnAudioUseBot",
            "Effect": "Allow",
            "Principal": {
                "Service": "voiceconnector.chime.amazonaws.com"
            },
            "Action": "lex:StartConversation",
            "Resource": !Sub "${BotAlias.Arn}",
            "Condition": {
                "StringEquals": {
                    "AWS:SourceAccount": !Sub "${AWS::AccountId}"
                    },
                    "ArnEquals": {
                    "AWS:SourceArn": !Sub "arn:aws:voiceconnector:${AWS::Region}:${AWS::AccountId}:sma/${SMAID}"
                    }
                }
              }
            ]
      }
  
  ChimeCallLexWeather:
    Type: 'AWS::Lex::ResourcePolicy'
    Properties:
      ResourceArn: !GetAtt BotAliasWeather.Arn
      Policy:
       {
          "Version": "2012-10-17",
          "Statement": [
            {
           "Sid": "AllowChimePstnAudioUseBotWeather",
            "Effect": "Allow",
            "Principal": {
                "Service": "voiceconnector.chime.amazonaws.com"
            },
            "Action": "lex:StartConversation",
            "Resource": !Sub "${BotAliasWeather.Arn}",
            "Condition": {
                "StringEquals": {
                    "AWS:SourceAccount": !Sub "${AWS::AccountId}"
                    },
                "ArnEquals": {
                    "AWS:SourceArn": !Sub "arn:aws:voiceconnector:${AWS::Region}:${AWS::AccountId}:sma/${SMAID}"
                    }
                }
              }
            ]
      }
      
  ChimeCallLexGPT:
    Type: 'AWS::Lex::ResourcePolicy'
    Properties:
      ResourceArn: !GetAtt BotAliasGPT.Arn
      Policy:
       {
          "Version": "2012-10-17",
          "Statement": [
            {
           "Sid": "AllowChimePstnAudioUseBotGPT",
            "Effect": "Allow",
            "Principal": {
                "Service": "voiceconnector.chime.amazonaws.com"
            },
            "Action": "lex:StartConversation",
            "Resource": !Sub "${BotAliasGPT.Arn}",
            "Condition": {
                "StringEquals": {
                    "AWS:SourceAccount": !Sub "${AWS::AccountId}"
                    },
                    "ArnEquals": {
                    "AWS:SourceArn": !Sub "arn:aws:voiceconnector:${AWS::Region}:${AWS::AccountId}:sma/${SMAID}"
                    }
                }
              }
            ]
      }
      
      
